name: Build by changes

on:
  workflow_dispatch:
  
jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'packages' output variable
      packages: ${{ steps.filter.outputs.changes }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          Dyn.Module: 'Dyn.Module/**'
          Gh.Module: 'Gh.Module/**'
          
  # JOB to build and test each of modified packages
  build:
    needs: changes
    strategy:
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files
        package: ['Dyn.Module', 'Gh.Module'] # ${{ fromJSON(needs.changes.outputs.packages) }}
      fail-fast: true
      max-parallel: 1
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: main
        
    - name: Read yaml file
      id: yaml
      run: | 
        value=`yq '.${{matrix.package}}' versions.yaml`
        echo "::set-output name=version::$value"
 
    - name: ⚙️ Bump if alpha.
      id: bump-with-alpha
      uses: actions/github-script@v3
      with:
        result-encoding: string
        script: |
                const incoming = "${{ steps.yaml.outputs.version }}"
                console.log("Incoming Tag: " + incoming)
                if(incoming.includes('alpha')) {
                  const oldNum = incoming.match(/alpha[.]*(\d+)/)[1]
                  const newNum = parseInt(oldNum)+1
                  const newTag = incoming.replace(/alpha.*\d+/, `alpha.${newNum}`)
                  console.log("New Tag: " + newTag)
                  return newTag
                }
                else {
                  const newTag =incoming +'-alpha.0'
                  console.log("New Tag: " + newTag)
                  return newTag
                }
          
    - name: Create directory
      id: directory
      run: | 
        dir='${{matrix.package}}/${{matrix.package}}.proj'
        dir2=${{ format('{0}/{1}.{2}', matrix.package, matrix.package, 'proj') }}
        echo $dir
        echo "::set-output name=proj-dir::$dir"
    
    - name: push dyn module
      if: ${{contains(matrix.package, 'Dyn')}}
      run: |
        echo "build ${{steps.directory.outputs.proj-dir}}"
        echo "${{ format('Project: {0} - Version:{1}', matrix.package, steps.bump-with-alpha.outputs.result) }}" > ${{matrix.package}}.txt
      
    - name: push gh module
      if: ${{contains(matrix.package, 'Gh')}}
      run: |
        echo "build ${{steps.directory.outputs.proj-dir}}"
        echo "${{ format('Project: {0} - Version:{1}', matrix.package, steps.bump-with-alpha.outputs.result) }}" > ${{matrix.package}}.txt
  
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.package}}
        path: ${{matrix.package}}.txt
        retention-days: 1
  
    - name: Update yaml
      uses: fjogeleit/yaml-update-action@main
      with:
        valueFile: 'versions.yaml'
        propertyPath: '${{matrix.package}}'
        value: ${{steps.bump-with-alpha.outputs.result}}
        masterBranchName: main
        targetBranch: main
        branch: main
        commitChange: true
        message: ${{ format('{0}{1}.{2}', 'Bumped the version for the project - ', matrix.package, 'proj') }} 
        token: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - run: mkdir -p path/artifacts
      
    - uses: actions/download-artifact@v3
      id: download
      with:
        path: path/artifacts
        
    - name: 📘 Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 1.0.0
        release_name: Release
        body: |
            ## Title

            ## Body
        draft: true
        prerelease: false
          
    - name: 💾 7Zip library
      run: |
        ls ${{steps.download.outputs.download-path}}
        7z a -t7z -mx=9 Libraries.7z ${{steps.download.outputs.download-path}}/*

    - name: 📤 Upload library to release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: 1.0.0
        file: Libraries.7z
        asset_name: Libraries.7z
        overwrite: true
