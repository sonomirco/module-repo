name: Checks for changes

on:
  push:
  
jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'packages' output variable
      packages: ${{ steps.filter.outputs.changes }}
      output2: ${{ steps.setversion.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Get version proj
      uses: kzrnm/get-net-sdk-project-versions-action@v1
      id: get-version
      with:
        proj-path: ./Gh-Components/Gh-Components.csproj 
    - id: setversion
      run: | 
        packageversion="${{steps.get-version.outputs.version}}"
        echo $packageversion
        echo "::set-output name=output2::$packageversion"
    - run: echo ${{steps.setversion.outputs.output2}}
        
    # For pull requests it's not necessary to checkout the code
    - name: Check which services were modified
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          project1: 'Gh-Components/**'
          project2: 'ModulComponents/**'

  # JOB to build and test each of modified packages
  build:
    needs: changes
    runs-on: ubuntu-latest
    steps:
    - name: create-json
      id: create-json
      uses: jsdaniell/create-json@1.1.2
      with:
        name: "new-json-file.json"
        json: '{"name":"jsdaniell", "password":"mypass"}'   
        
    - name: ðŸ“œ Display
      id: set_var
      run: |
          content=`cat ./new-json-file.json`
          echo "::set-output name=packageJson::$content"
          echo ${{ fromJSON(needs.changes.outputs.packages) }}
          echo ${{ steps.create-json.outputs.full-path }}   
          
    - run: |
          echo ${{fromJson(steps.set_var.outputs.packageJson).name}}
          echo ${{needs.changes.outputs.output2}}
